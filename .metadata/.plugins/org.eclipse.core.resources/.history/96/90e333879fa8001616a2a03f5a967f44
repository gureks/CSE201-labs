
/**
 * @author Gurek Singh 2015033
 */

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.concurrent.*;
import javax.swing.*;

public class TicTacToe extends Thread {
	static JFrame frame = new JFrame("Tic Tac Toe");
	static String move = "O";
	static JTextField textbox = new JTextField("Welcome to TicTacToe by Gurek");
	static JPanel gridPanel = new JPanel();
	static JPanel grid = new JPanel();
	static String user1 = "Player1", user2 = "Player2";
	static JButton b[] = new JButton[9];
	static int gameState[] = { -1, -1, -1, -1, -1, -1, -1, -1, -1 }; // 1 for X,0 for O
	static int win[][] = { { 0, 1, 2 }, { 3, 4, 5 }, { 6, 7, 8 }, { 0, 3, 6 }, { 1, 4, 7 }, { 2, 5, 8 }, { 0, 4, 8 }, { 2, 4, 6 } };
	static int gameMode = 4; 

	static String message = "Welcome to TicTacToe by Gurek";

	public TicTacToe() {
	}

	public static boolean gridFull() {
		for (int i = 0; i < gameState.length; i++) {
			if (gameState[i] == -1)
				return false;
		}
		return true;
	}

	public static int checkState() {
		// returns 1 if X won, 0 if ) one, else -1
		for (int i = 0; i < 8; i++) {
			if (gameState[win[i][0]] == 1 && gameState[win[i][1]] == 1 && gameState[win[i][2]] == 1)
				return 1;
			if (gameState[win[i][0]] == 0 && gameState[win[i][1]] == 0 && gameState[win[i][2]] == 0)
				return 0;
		}
		return -1;
	}

	public static void repaint() {
		for (int i = 0; i < 9; i++) {
			if (gameState[i] == 1) {
				b[i].setText("X");
			} else if (gameState[i] == 0) {
				b[i].setText("O");
			} else
				b[i].setText("");
		}
		check();
		textbox.setText(message);

	}

	public static void check() {

		if (checkState() != -1) {
			for (int j = 0; j < 9; j++) {
				b[j].setEnabled(false);
			}
			if (checkState() == 1)
				message = user1 + " wins. Press Exit or choose another game mode";
			else
				message = user2 + " wins. Press Exit or choose another game mode";
		} else if (gridFull()) {
			message = "Game Draw!";
			for (int j = 0; j < 9; j++) {
				b[j].setEnabled(false);
			}
		}
	}

	public static void makeMove(int i) {

		if (gameState[i] != -1) {
			message = "Already exists at the position, can't make the move";
		} else {
			if (gameMode == 1) { // User1 V User2
				if (move.equals("X")) {
					move = "O";
					gameState[i] = 0;
					message = user2 + "'s turn over, next turn.";
				} else if (move.equals("O")) {
					move = "X";
					gameState[i] = 1;
					message = user1 + "'s turn over, next turn.";
				}
				repaint();
			} else if (gameMode == 2) { // User V CPU
				move = "X";
				gameState[i] = 1;
				message = move + "'s turn over, next turn.";
				repaint();

				// CPU Turn
				if (!gridFull()) {
					move = "O";
					ArrayList<Integer> ls = new ArrayList<Integer>();
					for (int j = 0; j < 9; j++) {
						if (gameState[j] == -1)
							ls.add(j);
					}
					Collections.shuffle(ls);
					i = ls.get(0);
					move = "O";
					gameState[i] = 0;
					message = "CPU" + "'s turn over, next turn.";
					repaint();
				}

			} else if (gameMode == 3) { // CPU V AI
				// CPU
				if (!gridFull() && checkState() == -1) {
					move = "X";
					ArrayList<Integer> ls = new ArrayList<Integer>();
					for (int j = 0; j < 9; j++) {
						if (gameState[j] == -1)
							ls.add(j);
					}
					Collections.shuffle(ls);
					i = ls.get(0);
					gameState[i] = 1;
					message = user1 + "'s turn over, next turn.";
//					System.out.println("CPU - " + i);
					repaint();

					// DELAY
					new Thread(new Runnable() {
						public void run() {
							try {
								Thread.sleep(1000);
							} catch (Exception e1) {
								e1.printStackTrace();
							}

							// AI
							if (!gridFull() && checkState() == -1) {
								move = "O";
								int i = 0;
								int priority[] = { 4, 0, 2, 6, 8, 1, 3, 5, 7 };
								// if (gameState)
								if (((gameState[1] == gameState[2] && gameState[1] != -1)
										|| (gameState[3] == gameState[6] && gameState[3] != -1)
										|| (gameState[4] == gameState[8] && gameState[4] != -1))
										&& (gameState[0] == -1))
									i = 0;
								else if (((gameState[0] == gameState[2] && gameState[0] != -1)
										|| (gameState[4] == gameState[7] && gameState[4] != -1))
										&& (gameState[1] == -1))
									i = 1;
								else if (((gameState[0] == gameState[1] && gameState[1] != -1)
										|| (gameState[4] == gameState[6] && gameState[4] != -1)
										|| (gameState[5] == gameState[8] && gameState[5] != -1))
										&& (gameState[2] == -1))
									i = 2;
								else if (((gameState[0] == gameState[6] && gameState[0] != -1)
										|| (gameState[4] == gameState[5] && gameState[4] != -1))
										&& (gameState[3] == -1))
									i = 3;
								else if (((gameState[0] == gameState[8] && gameState[0] != -1)
										|| (gameState[1] == gameState[7] && gameState[1] != -1)
										|| (gameState[2] == gameState[6] && gameState[2] != -1)
										|| (gameState[3] == gameState[5] && gameState[3] != -1))
										&& (gameState[4] == -1))
									i = 4;
								else if (((gameState[3] == gameState[4] && gameState[3] != -1)
										|| (gameState[2] == gameState[8] && gameState[2] != -1))
										&& (gameState[5] == -1))
									i = 5;
								else if (((gameState[0] == gameState[3] && gameState[0] != -1)
										|| (gameState[8] == gameState[7] && gameState[8] != -1)
										|| (gameState[2] == gameState[4] && gameState[2] != -1))
										&& (gameState[6] == -1))
									i = 6;
								else if (((gameState[1] == gameState[4] && gameState[1] != -1)
										|| (gameState[6] == gameState[8] && gameState[6] != -1))
										&& (gameState[7] == -1))
									i = 7;
								else if (((gameState[2] == gameState[5] && gameState[2] != -1)
										|| (gameState[1] == gameState[4] && gameState[1] != -1)
										|| (gameState[6] == gameState[7] && gameState[6] != -1))
										&& (gameState[8] == -1))
									i = 8;
								else {
									for (int j = 0; j < 9; j++) {
										if (gameState[priority[j]] == -1) {
											i = priority[j];
//											System.out.println("Priority case " + i);
											break;
										}
									}
								}
								gameState[i] = 0;
//								System.out.println("AI - " + i);
								message = "AI" + "'s turn over, next turn.";
								repaint();
								int j;
								for (j = 0; j < 9; j++) {
									if (gameState[j] == -1)
										break;
								}
								if (!gridFull() && checkState() == -1)
									makeMove(j);
							}

						}
					}).start();
				}

			} else if (gameMode == 4) { // User V AI
				move = "X";
				gameState[i] = 1;
				message = move + "'s turn over, next turn.";
				repaint();
				
				if(!gridFull() && checkState()==-1){
					// AI Turn
					move = "O";
					int priority[] = { 4, 0, 2, 6, 8, 1, 3, 5, 7 };
					// if (gameState)
					if (((gameState[1] == gameState[2] && gameState[1] != -1)
							|| (gameState[3] == gameState[6] && gameState[3] != -1)
							|| (gameState[4] == gameState[8] && gameState[4] != -1))
							&& (gameState[0] == -1))
						i = 0;
					else if (((gameState[0] == gameState[2] && gameState[0] != -1)
							|| (gameState[4] == gameState[7] && gameState[4] != -1))
							&& (gameState[1] == -1))
						i = 1;
					else if (((gameState[0] == gameState[1] && gameState[1] != -1)
							|| (gameState[4] == gameState[6] && gameState[4] != -1)
							|| (gameState[5] == gameState[8] && gameState[5] != -1))
							&& (gameState[2] == -1))
						i = 2;
					else if (((gameState[0] == gameState[6] && gameState[0] != -1)
							|| (gameState[4] == gameState[5] && gameState[4] != -1))
							&& (gameState[3] == -1))
						i = 3;
					else if (((gameState[0] == gameState[8] && gameState[0] != -1)
							|| (gameState[1] == gameState[7] && gameState[1] != -1)
							|| (gameState[2] == gameState[6] && gameState[2] != -1)
							|| (gameState[3] == gameState[5] && gameState[3] != -1))
							&& (gameState[4] == -1))
						i = 4;
					else if (((gameState[3] == gameState[4] && gameState[3] != -1)
							|| (gameState[2] == gameState[8] && gameState[2] != -1))
							&& (gameState[5] == -1))
						i = 5;
					else if (((gameState[0] == gameState[3] && gameState[0] != -1)
							|| (gameState[8] == gameState[7] && gameState[8] != -1)
							|| (gameState[2] == gameState[4] && gameState[2] != -1))
							&& (gameState[6] == -1))
						i = 6;
					else if (((gameState[1] == gameState[4] && gameState[1] != -1)
							|| (gameState[6] == gameState[8] && gameState[6] != -1))
							&& (gameState[7] == -1))
						i = 7;
					else if (((gameState[2] == gameState[5] && gameState[2] != -1)
							|| (gameState[1] == gameState[4] && gameState[1] != -1)
							|| (gameState[6] == gameState[7] && gameState[6] != -1))
							&& (gameState[8] == -1))
						i = 8;
					else {
						for (int j = 0; j < 9; j++) {
							if (gameState[priority[j]] == -1) {
								i = priority[j];
								break;
							}
						}
					}
					// move="O";
					gameState[i] = 0;
					message = "AI" + "'s turn over, next turn.";
					repaint();
				}
			}
			// if(checkState()==1){
			// message="X won!";
			// }
			// else if(checkState()==0){
			// message="O won!";
			// }
		}
		// else if
		// if(move=="X"){
		// move="O";
		// gameState[i]=0;
		// }
		// else{
		// move="X";
		// gameState[i]=1;
		// }
		//// message = move + "'s turn over, next turn.";
		// return move;
	}

	public static boolean gameOver() {
		JButton buttons[] = (JButton[]) grid.getComponents();
		for (JButton a : buttons) {
			if (a.getText() == "") {
				return false;
			}
		}
		return true;
	}

	public static void UvU() {
		user1 = JOptionPane.showInputDialog(frame, "Enter name for User 1", null);
		user2 = JOptionPane.showInputDialog(frame, "Enter name for User 2", null);
		int turn = 0;
	}

	public static void reset() {
		for (int i = 0; i < gameState.length; i++) {
			gameState[i] = -1;
			b[i].setEnabled(true);
		}
		move = "O";
		repaint();
	}

	public static void game() {
		JPanel buttonPanel = new JPanel();

		JButton first = new JButton("User vs User");
		first.setPreferredSize(new Dimension(150, 50));

		JButton second = new JButton("User vs CPU");
		second.setPreferredSize(new Dimension(150, 50));

		JButton third = new JButton("CPU vs AI");
		third.setPreferredSize(new Dimension(150, 50));

		JButton fourth = new JButton("User vs AI");
		fourth.setPreferredSize(new Dimension(150, 50));

		first.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				gameMode = 1;
				reset();
				UvU();
				first.setForeground(new Color(52, 152, 219));
				first.setBackground(Color.BLACK);
			}

			private void UvU() {
				user1 = JOptionPane.showInputDialog(frame, "Enter name for User 1", null);
				user2 = JOptionPane.showInputDialog(frame, "Enter name for User 2", null);
			}
		});
		second.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				gameMode = 2;
				reset();
				UvCPU();
				second.setForeground(new Color(52, 152, 219));
				second.setBackground(Color.BLACK);
			}

			private void UvCPU() {
				user1 = JOptionPane.showInputDialog(frame, "Enter name for User 1", null);
				user2 = "CPU";
			}
		});
		third.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				gameMode = 3;
				reset();
				CPUvAI();
				third.setForeground(new Color(52, 152, 219));
				third.setBackground(Color.BLACK);
			}

			private void CPUvAI() {
				user1 = "CPU";
				user2 = "AI";
				first.setForeground(null);
				first.setBackground(null);
				second.setForeground(null);
				second.setBackground(null);
				fourth.setForeground(null);
				fourth.setBackground(null);
				makeMove(0 + (int) (Math.random() * 8));
			}
		});
		fourth.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				gameMode = 4;
				reset();
				UvAI();
				fourth.setForeground(new Color(52, 152, 219));
				fourth.setBackground(Color.BLACK);
			}

			private void UvAI() {
				user1 = JOptionPane.showInputDialog(frame, "Enter name for User 1", null);
				user2 = "AI";
			}
		});

		JButton exit = new JButton("Exit");
		exit.setPreferredSize(new Dimension(150, 50));
		exit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				frame.setVisible(false);
				System.exit(0);
			}
		});

		buttonPanel.add(first);
		buttonPanel.add(second);
		buttonPanel.add(third);
		buttonPanel.add(fourth);
		buttonPanel.add(exit);

		frame.getContentPane().add(BorderLayout.SOUTH, buttonPanel);
		frame.revalidate();

		JPanel textPanel = new JPanel();
		textbox.setPreferredSize(new Dimension(750, 100));
		textbox.setHorizontalAlignment(JTextField.CENTER);
		textbox.setFont(new Font("Arial", Font.PLAIN, 20));
		textPanel.setLayout(new FlowLayout());
		textPanel.add(textbox);

		gridPanel.setLayout(new FlowLayout());

		grid.setLayout(new GridLayout(3, 3, 0, 0));
		gridPanel.setMaximumSize(new Dimension(450, 450));
		gridPanel.add(grid);

		for (int i = 0; i < 9; i++) {
			b[i] = new JButton();
			b[i].setPreferredSize(new Dimension(150, 150));
			b[i].setMaximumSize(new Dimension(150, 150));
			b[i].setActionCommand(Integer.toString(i));
			b[i].setFont(new Font("Arial", Font.BOLD, 40));
			grid.add(b[i]);
			b[i].addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					makeMove(Integer.parseInt(e.getActionCommand()));
				}
			});
		}

		frame.getContentPane().add(BorderLayout.CENTER, gridPanel);
		frame.revalidate();

		frame.getContentPane().add(BorderLayout.NORTH, textPanel);
		frame.revalidate();
	}

	public static void init() 
	{
		JPanel panel = new JPanel();
		panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
		JLabel name = new JLabel("Tic-Tac-Toe");
		JLabel author = new JLabel("Gurek Singh - 2015033");

		JButton start = new JButton("Start Game");
		start.setPreferredSize(new Dimension(300, 50));
		start.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent e) 
			{
				panel.setVisible(false);
				frame.getContentPane().remove(panel);
				frame.revalidate();
				game();
			}
		});

		JButton exit = new JButton("Exit");
		exit.setPreferredSize(new Dimension(300, 50));
		exit.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				frame.setVisible(false);
				System.exit(0);
			}
		});

		panel.setLayout(null);

		name.setBounds(325, 150, 300, 50);
		name.setFont(new Font("Arial", Font.BOLD, 30));
		author.setBounds(300, 200, 300, 50);
		author.setFont(new Font("Arial", Font.ITALIC, 20));
		start.setBounds(300, 300, 300, 50);
		exit.setBounds(300, 400, 300, 50);

		panel.add(name);
		panel.add(author);
		panel.add(start);
		panel.add(exit);
		frame.getContentPane().add(BorderLayout.CENTER, panel);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(900, 700);
		frame.setVisible(true);
	}

	public static void main(String[] args)
	{
		init();
	}

}
